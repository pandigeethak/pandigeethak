# -*- coding: utf-8 -*-
"""Untitled25.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/a-forty-two/CGI-DPplusPy/blob/main/01_py_datastructures.ipynb
"""

#python -> Spark, Synapse Spark Pools-> PySpark or Scala

# EASY to write
# why?-> easy to read, simple syntax
# why not?-> SPEED and performance-> 72 times slower than C++/C#, 15-20 times slower than Java

# Pipelines-> small amount of instructions with isolation ,
 # transforming the data -> correction and ease is more important than VOLUME
 # PARALLEL processing

# python-> precompiled C++
# Datasets -> read/writing, stats, tansforming, visualize 
# Application program interface-> REST-> GET/POST/PUT/DEL 
# Machine Learning-> try

#OBJECT ORIENTED

# class-> special functions-> initialize the constructors and main function of C/C++ running behind the scenes
# INDENTATION-> spaces, tabs-> misplacing them will result in compilation error

def banana(val1,val2):
  return val1+val2

banana(1,2)

banana("hello","world")

banana("hello", 3)
#

fl = open('blah.txt', 'wt') # r/w/a , text mode or binary mode
fl.write(banana("hello","world"))
fl.close()

# batch and stream

# batch-> data -> dw dataset, dataframe 
!wget https://raw.githubusercontent.com/a-forty-two/CGI-DPplusPy/main/breastcancer_data.csv

!ls

#PANDAS-> Panel Dataframes
# Extract, Slice and Dice, and manipulate TABULAR data
# ROWS and COLUMNS
# Tx-> Statistics, SQL Joins, Math

import pandas
data = pandas.read_csv('breastcancer_data.csv', header=0)

data # POINTER-> REFERENCE

data['fractal_dimension_mean']

# List
ls = [42, 0.111111, 'hello world', '<input type="button">Click here</input>', False]

# ORDERED-> once created, ORDER DOES not change
ls

#Indexed
ls[0]# first element

# NEGATIVE INDEXING-> right to left
ls[-1] # last element

ls2 = [1, -1, ls]

ls # list concatenation

ls3 = [1,-1,[ls]]
ls3

ls3[-1]

potato = [ 1, 2, 2, 1, 'banana', 99, False, 3.14, 'buffalo']
# List is ORDERED, INDEXED
set1 = set(potato)
set1
# UNORDERED

# INDEXING-> undefined 
set1[2]

set2 = {ls} # an ordered, indexed collection CANNOT become a part of UNORDERED,
# unindexed collection!!!!

set2 = {set1, 3}

# UNION and INTERSECTION, SET add, subtract-> only ops
# SQL JOIN